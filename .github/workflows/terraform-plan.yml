# This GitHub Actions workflow is licensed under the MIT License.
# See the LICENSE file in the repository root for details.
name: Terraform Plan 

# Define events that trigger the workflow
on:
  pull_request: 
    branches:
      - main # Trigger the workflow on pull requests targeting the main branch


permissions: # Gives permissions to the runner 
  contents: read
  pull-requests: write

jobs: # Name of the job 
  terraform:
    name: 'Terraform Plan'
    runs-on: self-hosted # Use a self-hosted runner

    
    defaults: # Tells the runner to use bash
      run:
        shell: bash

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Set the GitHub token for authentication
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} 
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
    

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Check out the repository to the runner
        with:
          fetch-depth: 2 # Fetches the last 2 commits
          
      - name: Azure CLI Login # Login using Azure CLI to the Service Principal 
        run: |
          az --version
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}  

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Use the setup-terraform action to install Terraform
        with:
          terraform_version: 1.11.1 # Specify the current Terraform version
          terraform_wrapper: true # Enable Terraform wrapper
        
      - name: Terraform Format
        run: terraform fmt -recursive # Formats the .tf files automatically on the pull request

      - name: Get list of changed directories and Runs Terraform commands # Compares HEAD with origin/main, include only .tf files, awk to manipulate file paths, -F'/' sets field seperator, OFS="/" output field seperator, $NF"" removes file name leaving directory, print$0 prints modified line, sort sorts the directory paths -u removes duplicates, 
        run: | # Add further directories to be ignored if needed under ignored_dirs
          ignored_dirs=(
           "Terraform-Pipeline/azureExample/backend"
          )

          dirs=$(git diff --name-only origin/main..HEAD | grep '\.tf$' | awk -F'/' '{OFS="/"; $NF=""; print$0}' | sort -u | uniq | jq -R -s -c 'split("\n") | map(select(. != ""))')

          echo "Changed directories: $dirs"

          mkdir -p plans
        
          echo "$dirs" | jq -r '.[]' | while read -r dir; do
            dir=$(echo "$dir" | sed 's:/*$::' | xargs)
            safe_dir=$(echo "$dir" | sed 's|/|_|g')

            should_skip=false
            for ignored_dir in "${ignored_dirs[@]}"; do
              ignored_dir=$(echo "$ignored_dir" | sed 's:/*$::')
              if [[ "$dir" == "$ignored_dir" ]]; then
                should_skip=true
                break
              fi
            done

           if [ "$should_skip" = true ]; then
             echo "Skipping Terraform in directory: $dir (ignored)"
             continue
           fi

           if [ -d "$dir" ]; then
             echo "Running Terraform in directory: $dir"
             
             terraform -chdir="$dir" init 
             terraform -chdir="$dir" plan -no-color -out=tfplan
            
           if [ ! -f "$dir/tfplan" ]; then
             echo "No changes detected, skipping plan for $dir"
             continue
           fi

             terraform -chdir="$dir" show -no-color tfplan > "$dir/tfplan.txt"

              mkdir -p "plans/$safe_dir"

            if [ -f "$dir/tfplan" ]; then              
              mv "$dir/tfplan" "plans/$safe_dir/"
            else
              echo "Warning: tfplan not found in $dir after plan command"
              continue
            fi

            if [ -f "$dir/tfplan.txt" ]; then
              mv "$dir/tfplan.txt" "plans/$safe_dir/" 
            else
              echo "Warning: tfplan.txt not found in $dir after show command"
              continue
            fi
                         
            {
              echo "### Terraform Plan for \`$dir\`"
              echo '```terraform'
              cat "plans/$safe_dir/tfplan.txt"
              echo '```'
            } > comment-body.txt

              gh pr comment ${{ github.event.pull_request.number }} --body-file comment-body.txt

            fi
          done
